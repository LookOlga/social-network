{"version":3,"sources":["components/common/FormsControls/FormsControls.js","utils/validation/validator.js","components/Login/Login.js"],"names":["FormControl","input","meta","children","touched","error","hasError","className","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","placeholder","component","name","validate","id","htmlFor","LoginContainer","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe"],"mappings":"2RAEMA,EAAc,SAAC,GAA4B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACxBC,EAAkBF,EAAlBE,QAASC,EAASH,EAATG,MACVC,EAAWF,GAAWC,EAC5B,OACI,sBAAKE,UAAW,iBAAwBD,EAAW,QAAU,IAA7D,UACKH,EACAG,GAAY,+BAAOD,QAInBG,EAAW,SAACC,GACrB,IAAOR,EAAoCQ,EAApCR,MAAuBS,GAAaD,EAA7BP,KAA6BO,EAAvBE,MAApB,YAA2CF,EAA3C,IACA,OACI,cAACT,EAAD,2BAAiBS,GAAjB,aACI,oDAAcR,GAAWS,QAMxBE,EAAQ,SAACH,GAClB,IAAOR,EAAoCQ,EAApCR,MAAuBS,GAAaD,EAA7BP,KAA6BO,EAAvBE,MAApB,YAA2CF,EAA3C,IACA,OACA,cAACT,EAAD,2BAAiBS,GAAjB,aACI,iDAAWR,GAAWS,S,uDC1B9B,oEAAO,IAAMG,EAAU,SAAAC,GACnB,IAAGA,EAGH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAASD,EAAW,MAAO,gBAAkBA,EAAY,a,uDCTtE,yFA8DME,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAhCL,SAACV,GACf,IAAOY,EAAuBZ,EAAvBY,aAAchB,EAASI,EAATJ,MACrB,OACI,uBAAMiB,SAAUD,EAAcd,UAAU,mBAAxC,UACI,cAAC,IAAD,CAAOgB,KAAM,OACNC,YAAY,SACZjB,UAAU,eACVkB,UAAWb,IACXc,KAAM,QACNC,SAAU,CAACd,OAClB,cAAC,IAAD,CAAOU,KAAM,WAAYC,YAAY,WAAWjB,UAAU,eAAekB,UAAWb,IAAOc,KAAM,WAC1FC,SAAU,CAACd,OAClB,sBAAKN,UAAU,iCAAf,UACI,cAAC,IAAD,CAAOqB,GAAG,WACHL,KAAM,WACNhB,UAAU,kBACVkB,UAAWb,IACXc,KAAM,eACb,uBAAOG,QAAQ,WAAf,4BAEHxB,GAAS,qBAAKE,UAAU,oBAAf,SAAoCF,IAC9C,wBAAQE,UAAU,yBAAlB,2BAgBNuB,EAAiBC,aAXC,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UASqB,CAACE,UAAOC,YAAjCL,EAzDT,SAACtB,GAMX,OAAIA,EAAMwB,OACC,cAAC,IAAD,CAAUI,GAAI,aAIrB,qBAAK9B,UAAU,QAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,eAAd,mBACA,cAACW,EAAD,CAAgBI,SAbX,SAACgB,GACd,IAAOC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,WACxBhC,EAAM0B,MAAMI,EAAOC,EAAUC,cAwDtBX","file":"static/js/6.a03a3760.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './form-controls.css';\r\nconst FormControl = ({input, meta, children}) => {\r\n    const {touched, error} = meta;\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={\"form-control\" + \" \" + (hasError ? \"error\" : \"\")}>\r\n            {children}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n          \r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (\r\n    <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n","export const required= value => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return \"Max length is\" + maxLength + \"symbols\";\r\n    return undefined;\r\n}\r\n","import React from \"react\";\r\n\r\nimport './login.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validation/validator\";\r\nimport {login, logout} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        const {email, password, rememberMe} = formData;\r\n        props.login(email, password, rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__wrapper\">\r\n                <h2 className=\"login__title\">Login</h2>\r\n                <LoginReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginForm = (props) => {\r\n    const {handleSubmit, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form login__form\">\r\n            <Field type={\"text\"}\r\n                   placeholder=\"e-mail\"\r\n                   className=\"login__input\"\r\n                   component={Input}\r\n                   name={\"email\"}\r\n                   validate={[required]}/>\r\n            <Field type={\"password\"} placeholder=\"password\" className=\"login__input\" component={Input} name={\"password\"}\r\n                   validate={[required]}/>\r\n            <div className=\"login__input-group input-group\">\r\n                <Field id=\"remember\"\r\n                       type={\"checkbox\"}\r\n                       className=\"login__checkbox\"\r\n                       component={Input}\r\n                       name={\"rememberMe\"}/>\r\n                <label htmlFor=\"remember\">remember me</label>\r\n            </div>\r\n            {error && <div className=\"form-common-error\">{error}</div>}\r\n            <button className=\"login__btn primary-btn\">Sign in</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\nconst LoginContainer = connect(mapStateToProps, {login, logout})(Login);\r\n\r\nexport default LoginContainer;\r\n"],"sourceRoot":""}